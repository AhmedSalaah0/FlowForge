@model IEnumerable<SectionWithTasksResponse>
@{
    ViewBag.Title = "Tasks";
    var projectId = ViewBag.ProjectId;
}

<div class="container mt-4">
    <div class="mb-4 border-bottom border-secondary pb-2">
        <h1 class="h3 text-light d-flex align-items-center gap-2">
            <i class="fas fa-columns"></i> Tasks Board
        </h1>
        <p class="text-light">Manage your project tasks by sections</p>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div class="alert alert-danger">@error.ErrorMessage</div>
        }
    }

    @if (ViewBag.Members != null)
    {
        <div class="dropdown mb-4">
            <button class="btn btn-outline-info dropdown-toggle d-flex align-items-center gap-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-users"></i>
                Project Members
            </button>

            <ul class="dropdown-menu p-2 shadow" style="min-width: 250px;">
                @foreach (var member in ViewBag.Members)
                {
                    <li class="dropdown-item d-flex align-items-center justify-content-between gap-2 px-2 py-2 rounded-2">
                        <div class="d-flex align-items-center gap-2">
                            <div class="avatar bg-info text-white fw-semibold rounded-circle d-flex align-items-center justify-content-center"
                                 style="width: 28px; height: 28px; font-size: 0.8rem;">
                                @member.Member.PersonName?[0].ToString().ToUpper()
                            </div>
                            <div class="lh-sm">
                                <div class="fw-medium text-light" style="font-size: 0.85rem;">
                                    @member.Member.PersonName
                                </div>
                                <div class="text-info" style="font-size: 0.75rem;">
                                    @member.MemberRole
                                </div>
                            </div>
                        </div>

                        @if(member.MemberRole != ProjectRole.Creator)
                        {
                            <form asp-controller="ProjectMembers"
                                  asp-action="RemoveMember"
                                  asp-route-projectId="@projectId"
                                  asp-route-memberId="@member.Member.Id"
                                  method="post" class="d-inline m-0">
                                <button type="submit" class="btn btn-outline-danger btn-sm" title="Remove Member">
                                    <i class="fas fa-user-minus"></i>
                                </button>
                            </form>
                        }
                    </li>
                }
            </ul>
        </div>
    }

    <div class="flex-wrap-fix">
        @foreach (var s in Model)
        {
            <div class="card bg-dark text-white shadow-sm p-3 border border-secondary rounded-4" style="min-width: 50vh; flex: 0 0 auto;">
                <div class="d-flex justify-content-between align-items-center mb-3 border-bottom pb-2">
                    <h5 class="text-info m-0">@s.SectionName</h5>
                    <a asp-controller="Sections" asp-action="DeleteSection" asp-route-sectionId="@s.SectionId" asp-route-projectId="@s.ProjectId"
                       class="btn btn-sm btn-outline-danger" title="Delete Section">
                        <i class="fas fa-trash-alt"></i>
                    </a>
                </div>

                <div class="task-list" id="section-@s.SectionId" data-section-id="@s.SectionId" data-project-id="@s.ProjectId">
                @foreach (var task in s.Tasks)
                {
                    <div class="task-card mb-3 p-3 rounded-3 shadow-sm bg-dark text-light position-relative" data-task-id="@task.TaskId">
                        <div class="d-flex justify-content-between align-items-start">
                            <div class="form-check mt-1">
                                <input class="form-check-input" type="checkbox"
                                       id="taskCheck_@task.TaskId"
                                       data-status="@task.Status.ToString()"
                                       data-project-id = "@task.ProjectId"
                                       data-task-id="@task.TaskId"
                                       @(task.Status == ProjectTaskStatus.Completed ? "checked" : "") />
                            </div>

                            <div class="ms-2 flex-grow-1">
                                <div class="fw-semibold @(task.Status == ProjectTaskStatus.Completed ? "text-decoration-line-through text-secondary" : "")">
                                    @task.Title
                                </div>

                                @if (!string.IsNullOrWhiteSpace(task.Description))
                                {
                                    <div class="small text-muted">@task.Description</div>
                                }

                                @if (task.ScheduleDateTime.HasValue)
                                {
                                    <div class="small text-warning mt-1">
                                        <i class="fas fa-clock me-1"></i>@task.ScheduleDateTime?.ToString("dd MMM yyyy hh:mm tt")
                                    </div>
                                }
                            </div>

                            <div class="dropdown ms-2" data-bs-display="static">
                            <button class="btn btn-outline-info btn-sm" type="button" id="taskMenuButton-@task.TaskId"
                                    data-bs-toggle="dropdown" aria-expanded="false">
                                <i class="fas fa-ellipsis-v"></i>
                            </button>

                            <ul class="dropdown-menu" aria-labelledby="taskMenuButton-@task.TaskId">
                                <li>
                                    <a class="dropdown-item"
                                       asp-controller="Tasks" asp-action="EditTask"
                                       asp-route-projectId="@task.ProjectId" asp-route-taskId="@task.TaskId">
                                        <i class="fas fa-pen me-2"></i> Edit Task
                                    </a>
                                </li>
                                <li>
                                    <a class="dropdown-item text-danger"
                                       asp-controller="Tasks" asp-action="DeleteTask"
                                       asp-route-projectId="@task.ProjectId" asp-route-taskId="@task.TaskId">
                                        <i class="fas fa-trash-alt me-2"></i> Delete Task
                                    </a>
                                </li>
                            </ul>
                        </div>

                        </div>

                        <div class="d-flex gap-2 mt-3">

                                <div class="dropdown" data-bs-display="static">
                                <button id="selectedStatus_@task.TaskId" class="btn btn-sm d-flex align-items-center gap-2 px-2 py-1 rounded-2 border border-secondary text-light"
                                        type="button"
                                        data-bs-display="static"
                                        data-bs-toggle="dropdown"
                                        aria-expanded="false"
                                        data-status="@task.Status.ToString()"
                                        style="font-size: 0.8rem;">
                                    <span class="status-dot"
                                          style="width: 10px; height: 10px; border-radius: 50%; display: inline-block;
                                          background-color:@(task.Status == ProjectTaskStatus.Pending ? "#ffc107" :
                                                            task.Status == ProjectTaskStatus.In_Progress ? "#0d6efd" :
                                                            task.Status == ProjectTaskStatus.Completed ? "#198754" : "#6c757d");">
                                    </span>
                                    <span class="fw-semibold">@task.Status.ToString().Replace("_", " ")</span>
                                    <i class="fas fa-chevron-down ms-1 small"></i>
                                </button>

                                <ul class="dropdown-menu shadow-sm">
                                    @foreach (var status in Enum.GetValues(typeof(ProjectTaskStatus)).Cast<ProjectTaskStatus>())
                                    {
                                        <li>
                                            <button type="button"
                                                    class="dropdown-item d-flex align-items-center gap-2 status-option @(status == task.Status ? "active" : "")"
                                                    data-task-id="@task.TaskId"
                                                    data-project-id ="@task.ProjectId"
                                                    data-status="@status">
                                                    <span class="status-dot" style="background-color:@(status == ProjectTaskStatus.Pending ? "#ffc107" :
                                                                        status == ProjectTaskStatus.In_Progress ? "#0d6efd" :
                                                                        status == ProjectTaskStatus.Completed ? "#198754" : "#6c757d");">
                                                </span>
                                                @status.ToString().Replace("_", " ")
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>

                            <div class="dropdown">
                                <button id="Assignee_@task.TaskId" class="btn btn-sm d-flex align-items-center gap-2 px-2 py-1 rounded-2 border border-secondary text-light"
                                        type="button"
                                        data-bs-toggle="dropdown"
                                        aria-expanded="false"
                                        style="font-size: 0.8rem;">
                                    <span id="Assignee-span-@task.TaskId">@(task.Assignee?.Member.PersonName ?? "Unassigned")</span>
                                    <i class="fas fa-user ms-1 small" aria-hidden="true"></i>
                                </button>

                                <ul class="dropdown-menu shadow-sm">
                                    @foreach (var person in task.Project.ProjectMembers)
                                    {
                                        <li>
                                            <button type="button"
                                                    class="dropdown-item d-flex align-items-center gap-2 assignee-option @(task.Assignee?.MemberId == person.MemberId ? "active" : "")"
                                                    data-task-id="@task.TaskId"
                                                    data-project-id = "@task.ProjectId"
                                                    data-assignee-id="@person.MemberId"
                                                    data-old-assinee-id ="@task.AssigneeId"
                                                     id="assignee-name-@person.MemberId">
                                                @person.Member.PersonName
                                            </button>
                                        </li>
                                    }
                                </ul>
                            </div>
                        </div>
                    </div>
                }
                </div>

                <a asp-controller="Tasks" asp-action="Task"
                   asp-route-projectId="@projectId"
                   asp-route-sectionId="@s.SectionId"
                   class="btn btn-sm btn-outline-light w-100 mt-2">
                    <i class="fas fa-plus me-1"></i> Add Task
                </a>
            </div>
        }

        <div class="card bg-dark text-white border border-secondary p-3 rounded-4 d-flex align-items-center justify-content-start"
             style="min-width: 300px; flex: 0 0 auto;">
            <form asp-controller="Sections" asp-action="AddSection" method="post" class="w-100">
                @Html.AntiForgeryToken()
                <input type="hidden" name="ProjectId" value="@projectId" />
                <div class="mb-2">
                    <input name="SectionName" class="form-control bg-secondary text-white border-0" placeholder="New Section..." required />
                </div>
                <button type="submit" class="btn btn-outline-info w-100">
                    <i class="fas fa-plus me-1"></i> Add Section
                </button>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            var dropdownElementList = [].slice.call(document.querySelectorAll('[data-bs-toggle="dropdown"]'));
            var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                return new bootstrap.Dropdown(dropdownToggleEl);
            });

            document.querySelectorAll('.status-option').forEach(button => {
                button.addEventListener('click', function () {
                    const taskId = this.dataset.taskId;
                    const projectId = this.dataset.projectId;
                    const newStatus = this.dataset.status;

                    const taskCard = document.querySelector(`.task-card[data-task-id="${taskId}"]`);
                    if (!taskCard) {
                        console.warn('task-card not found for', taskId);
                        return;
                    }

                    const checkbox = taskCard.querySelector(".form-check-input");
                    const text = taskCard.querySelector(".fw-semibold");
                    const dropdownBtn = document.getElementById(`selectedStatus_${taskId}`) || taskCard.querySelector("[id^='selectedStatus']");
                    const spans = dropdownBtn ? dropdownBtn.querySelectorAll("span") : [];
                    const dotSpan = spans[0];
                    const textSpan = spans[1];

                    document.querySelectorAll(`.status-option[data-task-id="${taskId}"]`).forEach(opt => opt.classList.remove('active'));
                    this.classList.add('active');

                fetch('/Tasks/taskState', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ taskId, projectId ,status: newStatus })
                })
                .then(response => {
                    if (response.ok) {
                        if (newStatus === "Completed") {
                            text.classList.add("text-decoration-line-through");
                            text.style.color = "#979494d1";
                            dotSpan.style.backgroundColor = "#198754";
                            textSpan.textContent = "Completed";
                            checkbox.checked = true;
                        } else if (newStatus === "Pending") {
                            dotSpan.style.backgroundColor = "#ffc107";
                            textSpan.textContent = "Pending";
                            text.classList.remove("text-decoration-line-through");
                            text.classList.remove("text-secondary")
                            text.style.color = "#ffffff";
                            checkbox.checked = false;
                        } else {
                            textSpan.textContent = "In Progress";
                            dotSpan.style.backgroundColor = "#0d6efd";
                            text.classList.remove("text-decoration-line-through");
                            text.classList.remove("text-secondary")
                            text.style.color = "#ffffff";
                            checkbox.checked = false;
                        }
                    } else {
                        alert("Failed to update task status.");
                    }
                });
            });
        });
        
        document.body.addEventListener("change", function(e) {
            if (e.target.classList.contains("form-check-input")) {
                const taskId = e.target.dataset.taskId;
                const projectId = e.target.dataset.projectId;
                const status = e.target.dataset.status == "Completed" ? "Pending" : "Completed";
                const taskCard = document.querySelector(`.task-card[data-task-id="${taskId}"]`);
                const checkbox = taskCard.querySelector(".form-check-input");
                const text = taskCard.querySelector(".fw-semibold");
                const dropdownBtn = document.getElementById(`selectedStatus_${taskId}`) || taskCard.querySelector("[id^='selectedStatus']");
                const spans = dropdownBtn ? dropdownBtn.querySelectorAll("span") : [];
                const dotSpan = spans[0];
                const textSpan = spans[1];
                fetch("/Tasks/TaskState",{
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        taskId,
                        projectId,
                        status
                    })
                })
                .then(response => {
                    if (response.ok)
                    {
                        if (status === "Completed")
                        {
                             text.classList.add("text-decoration-line-through");
                             text.style.color = "#979494d1";
                             dotSpan.style.backgroundColor = "#198754";
                             textSpan.textContent = "Completed";
                             checkbox.checked = true;
                        }
                        else
                        {
                            dotSpan.style.backgroundColor = "#ffc107";
                            textSpan.textContent = "Pending";
                            text.classList.remove("text-decoration-line-through");
                            text.classList.remove("text-secondary")
                            text.style.color = "#ffffff";
                            checkbox.checked = false;
                        }
                        e.target.dataset.status = status;
                    }
                })
            }
        })
        document.body.addEventListener('click', function (e) {
            if (e.target.classList.contains('assignee-option')) {
                const taskId = e.target.dataset.taskId;
                const projectId = e.target.dataset.projectId;
                const assigneeId = e.target.dataset.assigneeId;
                const assigneeSpan = document.querySelector(`#Assignee-span-${taskId}`);

                e.target.closest('ul').querySelectorAll('.assignee-option').forEach(opt => opt.classList.remove('active'));
                e.target.classList.add('active');

                fetch('/Tasks/Assign', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        taskId,
                        projectId,
                        memberId: assigneeId
                    })
                })
                .then(response => {
                    if (response.ok) {
                        assigneeSpan.textContent = e.target.textContent.trim();
                    } else {
                        alert("Failed to assign task.");
                    }
                });
            }
        });


        document.querySelectorAll(".task-list").forEach(list => {
        new Sortable(list, {
            group: "tasks",
            animation: 100,
            delay: 0,
            delayOnTouchStart: false,
            forceFallback: false, 
            fallbackTolerance: 0, 
            dragoverBubble: false,
            removeCloneOnHide: true,
            preventOnFilter: false,
            
            onStart: function(evt) {
                evt.item.style.opacity = "0.6";
                evt.item.style.transform = "rotate(5deg)";
            },
            
            onEnd: async function (evt) {
                evt.item.style.opacity = "1";
                evt.item.style.transform = "none";
                
                const taskId = evt.item.dataset.taskId;
                
                console.log("From element:", evt.from);
                console.log("To element:", evt.to);
                console.log("From attributes:", evt.from.attributes);
                console.log("To attributes:", evt.to.attributes);
                
                const oldSectionId = evt.from.dataset.sectionId;
                const newSectionId = evt.to.dataset.sectionId;
                const projectId = evt.to.dataset.projectId;

                console.log(`Task ID: ${taskId}`);
                console.log(`Old Section: ${oldSectionId}, New Section: ${newSectionId}`);
                console.log(`Project ID: ${projectId}`);

                if (oldSectionId === newSectionId) {
                    console.log("Task dropped in the same section. No API call.");
                    return;
                }

                try {
                    const response = await fetch("/Tasks/MoveTask", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            TaskId: taskId,
                            NewSectionId: newSectionId,
                            ProjectId: projectId
                        })
                    });

                    if (!response.ok) throw new Error("Failed to move task.");
                    console.log(`✅ Task ${taskId} moved from ${oldSectionId} to ${newSectionId}`);
                } catch (err) {
                    alert(err.message);
                    location.reload();
                }
            }
        });
    });
    document.querySelectorAll('.task-card .dropdown').forEach(dropdown => {
          const toggle = dropdown.querySelector('[data-bs-toggle="dropdown"]');
          const menu = dropdown.querySelector('.dropdown-menu');
          if (!toggle || !menu) return;

          let placeholder = null;

          dropdown.addEventListener('show.bs.dropdown', () => {
            placeholder = document.createComment('dropdown-placeholder');
            menu.parentNode.insertBefore(placeholder, menu);

            document.body.appendChild(menu);
            menu.style.position = 'absolute';
            menu.style.zIndex = '99999';
            menu.style.minWidth = Math.max(toggle.offsetWidth, menu.offsetWidth) + 'px';
          });

          dropdown.addEventListener('shown.bs.dropdown', () => {
            const r = toggle.getBoundingClientRect();
            const menuRect = menu.getBoundingClientRect();

            let left = r.left + window.scrollX;
            let top  = r.bottom + window.scrollY;

            if (left + menuRect.width > window.innerWidth) {
              left = Math.max(window.innerWidth - menuRect.width - 8, 8);
            }
            if (top + menuRect.height > window.scrollY + window.innerHeight) {
              top = r.top + window.scrollY - menuRect.height;
            }

            menu.style.left = left + 'px';
            menu.style.top  = top + 'px';
          });

          dropdown.addEventListener('hide.bs.dropdown', () => {
            if (placeholder) {
              placeholder.parentNode.insertBefore(menu, placeholder);
              placeholder.remove();
              placeholder = null;
              menu.style.position = '';
              menu.style.left = '';
              menu.style.top = '';
              menu.style.zIndex = '';
              menu.style.minWidth = '';
            }
          });
        });
    });
    </script>
}