@model IEnumerable<SectionWithTasksResponse>
@{
    ViewBag.Title = "Tasks";
    var projectId = ViewBag.ProjectId;
}

<div class="container mt-4">
    <div class="mb-4 border-bottom border-secondary pb-2">
        <h1 class="h3 text-light d-flex align-items-center gap-2">
            <i class="fas fa-columns"></i> Tasks Board
        </h1>
        <p class="text-light">Manage your project tasks by sections</p>
    </div>

    @if (!ViewData.ModelState.IsValid)
    {
        foreach (var error in ViewData.ModelState.Values.SelectMany(v => v.Errors))
        {
            <div class="alert alert-danger">@error.ErrorMessage</div>
        }
    }

    @if (ViewBag.Members != null)
    {
        <div class="dropdown mb-4">
            <button class="btn btn-outline-info dropdown-toggle d-flex align-items-center gap-2" type="button" data-bs-toggle="dropdown" aria-expanded="false">
                <i class="fas fa-users"></i>
                Project Members
            </button>

            <ul class="dropdown-menu dropdown-menu-dark p-2 shadow" style="min-width: 250px;">
                @foreach (var member in ViewBag.Members)
                {
                    <li class="dropdown-item d-flex align-items-center justify-content-between gap-2 px-2 py-2 rounded-2">
                        <div class="d-flex align-items-center gap-2">
                            <div class="avatar bg-info text-white fw-semibold rounded-circle d-flex align-items-center justify-content-center"
                                 style="width: 28px; height: 28px; font-size: 0.8rem;">
                                @member.Member.PersonName?[0].ToString().ToUpper()
                            </div>
                            <div class="lh-sm">
                                <div class="fw-medium text-light" style="font-size: 0.85rem;">
                                    @member.Member.PersonName
                                </div>
                                <div class="text-info" style="font-size: 0.75rem;">
                                    @member.MemberRole
                                </div>
                            </div>
                        </div>

                        <form asp-controller="ProjectMembers"
                              asp-action="RemoveMember"
                              asp-route-projectId="@projectId"
                              asp-route-memberId="@member.Member.Id"
                              method="post" class="d-inline m-0">
                            <button type="submit" class="btn btn-outline-danger btn-sm" title="Remove Member">
                                <i class="fas fa-user-minus"></i>
                            </button>
                        </form>
                    </li>
                }
            </ul>
        </div>
    }

    <div class="d-flex flex-wrap gap-3 justify-content-start">
        @foreach (var s in Model)
        {
            <div class="card bg-dark text-white shadow-sm p-3 border border-secondary rounded-4" style="min-width: 300px; flex: 0 0 auto;">
                <div class="d-flex justify-content-between align-items-center mb-3 border-bottom pb-2">
                    <h5 class="text-info m-0">@s.SectionName</h5>
                    <a asp-controller="Sections" asp-action="DeleteSection" asp-route-sectionId="@s.SectionId" asp-route-projectId="@s.ProjectId"
                       class="btn btn-sm btn-outline-danger" title="Delete Section">
                        <i class="fas fa-trash-alt"></i>
                    </a>
                </div>

                <div class="task-list" id="section-@s.SectionId" data-section-id="@s.SectionId" data-project-id="@s.ProjectId">
                @foreach (var task in s.Tasks)
                {
                    <div class="task-card mb-3 p-3 rounded-3 shadow-sm d-flex flex-column gap-2 position-relative" data-task-id="@task.TaskId">

                        <div class="d-flex justify-content-between align-items-start">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="taskCheck"
                                    data-task-id="@task.TaskId"
                                    data-project-id="@task.ProjectId"
                                    @(task.Success ? "checked" : "") />
                            </div>

                            <div class="ms-2 flex-grow-1">
                                <strong class="@(task.Success ? "text-decoration-line-through text-muted" : "")">
                                    @task.Title
                                </strong>

                                @if (!string.IsNullOrWhiteSpace(task.Description))
                                {
                                    <div class="text-light small">@task.Description</div>
                                }

                                @if (task.ScheduleDateTime.HasValue)
                                {
                                    <div class="small text-warning">
                                        <i class="fas fa-clock me-1"></i>@task.ScheduleDateTime?.ToString("dd MMM yyyy hh:mm tt")
                                    </div>
                                }
                            </div>

                            <div class="btn-group btn-group-sm">
                                <a asp-controller="Tasks" asp-action="EditTask"
                                   asp-route-projectId="@task.ProjectId" asp-route-taskId="@task.TaskId"
                                   class="btn btn-outline-primary" title="Edit Task">
                                    <i class="fas fa-pen"></i>
                                </a>
                                <a asp-controller="Tasks" asp-action="DeleteTask"
                                   asp-route-projectId="@task.ProjectId" asp-route-taskId="@task.TaskId"
                                   class="btn btn-outline-danger" title="Delete Task">
                                    <i class="fas fa-trash-alt"></i>
                                </a>
                            </div>
                        </div>
                    </div>
                }
                </div>


                <a asp-controller="Tasks" asp-action="Task"
                   asp-route-projectId="@projectId"
                   asp-route-sectionId="@s.SectionId"
                   class="btn btn-sm btn-outline-light w-100 mt-2">
                    <i class="fas fa-plus me-1"></i> Add Task
                </a>
            </div>
        }

        <div class="card bg-dark text-white border border-secondary p-3 rounded-4 d-flex align-items-center justify-content-start"
             style="min-width: 300px; flex: 0 0 auto;">
            <form asp-controller="Sections" asp-action="AddSection" method="post" class="w-100">
                <input type="hidden" name="ProjectId" value="@projectId" />
                <div class="mb-2">
                    <input name="SectionName" class="form-control bg-secondary text-white border-0" placeholder="New Section..." required />
                </div>
                <button type="submit" class="btn btn-outline-info w-100">
                    <i class="fas fa-plus me-1"></i> Add Section
                </button>
            </form>
        </div>
    </div>
</div>


@section Scripts {
    <script>
            document.querySelectorAll(".form-check-input").forEach(checkbox => {
            checkbox.addEventListener("change", function() {
                const taskId = this.dataset.taskId;
                const projectId = this.dataset.projectId;
                const isChecked = this.checked;

                fetch(`/Tasks/taskState/${taskId}`, {
                    method: "POST"
                })
                .then(response => {
                    if (!response.ok) throw new Error("Failed to update task status");
                    return response.json();
                })
                .then(data => {
                    const taskCard = this.closest(".task-card");
                    if (isChecked) {
                        taskCard.querySelector("strong").classList.add("text-decoration-line-through", "text-muted");
                    } else {
                        taskCard.querySelector("strong").classList.remove("text-decoration-line-through", "text-muted");
                    }
                })
                .catch(err => {
                    console.error("Error updating task state:", err);
                    alert("Failed to update task state. Please try again.");
                    location.reload();
                });
            });
        });
    document.addEventListener("DOMContentLoaded", function () {
    document.querySelectorAll(".task-list").forEach(list => {
        new Sortable(list, {
            group: "tasks",
            animation: 100,
            delay: 0,
            delayOnTouchStart: false,
            forceFallback: false, 
            fallbackTolerance: 0, 
            dragoverBubble: false,
            removeCloneOnHide: true,
            preventOnFilter: false,
            
            onStart: function(evt) {
                evt.item.style.opacity = "0.6";
                evt.item.style.transform = "rotate(5deg)";
            },
            
            onEnd: async function (evt) {
                evt.item.style.opacity = "1";
                evt.item.style.transform = "none";
                
                const taskId = evt.item.dataset.taskId;
                
                console.log("From element:", evt.from);
                console.log("To element:", evt.to);
                console.log("From attributes:", evt.from.attributes);
                console.log("To attributes:", evt.to.attributes);
                
                const oldSectionId = evt.from.dataset.sectionId;
                const newSectionId = evt.to.dataset.sectionId;
                const projectId = evt.to.dataset.projectId;

                console.log(`Task ID: ${taskId}`);
                console.log(`Old Section: ${oldSectionId}, New Section: ${newSectionId}`);
                console.log(`Project ID: ${projectId}`);

                if (oldSectionId === newSectionId) {
                    console.log("Task dropped in the same section. No API call.");
                    return;
                }

                try {
                    const response = await fetch("/Tasks/MoveTask", {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json"
                        },
                        body: JSON.stringify({
                            TaskId: taskId,
                            NewSectionId: newSectionId,
                            ProjectId: projectId
                        })
                    });

                    if (!response.ok) throw new Error("Failed to move task.");
                    console.log(`✅ Task ${taskId} moved from ${oldSectionId} to ${newSectionId}`);
                } catch (err) {
                    alert(err.message);
                    location.reload();
                }
            }
        });
    });
});
    </script>

}
